import numpy as np
import matplotlib.pyplot as plt
import time
# w,b预先为0
# 学习率rate=1
plt.rcParams['font.sans-serif'] = ['KaiTi', 'SimHei', 'FangSong']  # 汉字字体,优先使用楷体，如果找不到楷体，则使用黑体
plt.rcParams['font.size'] = 12  # 字体大小
plt.rcParams['axes.unicode_minus'] = False  # 正常显示负号

def label(s):
    it={b'Iris-setosa':-1, b'Iris-versicolor':1, b'Iris-virginica':2 }
    return it[s]

def perception_dual(x,y):
    y = y.reshape(np.shape(x)[0],1)
    rate = 1
    Gram = np.dot(x, np.transpose(x))
    a = np.zeros(np.shape(x)[0]).reshape(np.shape(x)[0],1)
    while True:
        pro = a * y
        b = np.array(sum(pro[:,0]))
        judge = y*(np.dot(Gram,a * y) + np.array([b]*np.shape(x)[0]).reshape(np.shape(x)[0],1))
        for i in range(np.shape(judge)[0]):
            if judge[i]<=0:
                a[i]+=rate
                break
        if (judge>0).all():break
    w = a * y * x
    w = np.array([sum(w[:, i]) for i in range(np.shape(w)[1])])
    result = np.dot(Gram,a * y) + np.array([b]*np.shape(x)[0]).reshape(np.shape(x)[0],1)
    print(f'对偶模式得到了 w={w},b={b}')
    y_pred = np.ones(np.shape(x)[0]).reshape(np.shape(x)[0],1)
    y_pred[np.where(result<0)] = -1
    tag = 1-len(np.where(y!= y_pred)[0])/np.shape(x)[0]
    print(f'准确率为{tag*100}%')
    visual(x,w,b)

def perception(x,y):
    start = time.time()
    w = np.zeros((1,np.shape(x)[1]))
    b,rate = 0,1
    while True:
        tag = 0
        for i in range(np.shape(x)[0]):
            if y[i]*(np.dot(w,x[i].reshape(x[i].shape[0], 1))+b)<=0:
                w = w + rate * y[i] * x[i]
                b = b + rate * y[i]
                break
            tag +=1
        if tag==np.shape(x)[0]:
            break
    end = time.time()
    print(f'原始模式得到的w={w},b={b}')
    print('耗时为：', end - start)
    visual(x, w, b)

def visual(x,w,b):
    w = w.reshape(1,np.shape(x)[1])
    x = x
    min_x = np.min(x)
    max_x = np.max(x)+0.5
    x1 = np.linspace(min_x,max_x,num=100).reshape(100,1)
    x2 = (-1*b-w[0,0]*x1)/w[0,1]
    plt.plot(x1, x2)
    plt.scatter(x[:, 0], x[:, 1])
    plt.show()

if __name__=='__main__':
    path = 'iris.data'
    data = np.loadtxt(path,dtype=float,delimiter=',',converters={4: label})
    data = data[:100,:]
    x = data[:,:2]
    y = np.transpose(data[:,4])
    # x = np.array([[3,3],[4,3],[1,1]])
    # y = np.array([1,1,-1]).reshape(3,1)
    #perception(x,y)
    perception_dual(x,y)

